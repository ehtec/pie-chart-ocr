stages:
  - linting
  - test
  - deploy
  - metrics

flake8:
  stage: linting
  image: python:3.7
  before_script:
    - pip install flake8
  script:
    - flake8 .
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_TAG'

.nose2:
  before_script:
    - apt-get update
    - apt-get install libboost-system-dev tesseract-ocr build-essential git cmake ffmpeg libsm6 libxext6 -y
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - git submodule update --init --recursive
    - python3 setup.py build_ext
    - mkdir temp
    - mkdir temp1
    - mkdir temp2
    - unzip data/charts_steph.zip -d data
    - unzip data/charts_steph_upscaled.zip -d data
  script:
    - python3 -m nose2 --start-dir tests/ --with-coverage
    - python3 -m coverage xml --fail-under 0
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  #  only:
  #    - merge_requests
  #    - tags
  #    - main
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_TAG'


nose2-3.7-buster:
  extends: .nose2
  stage: test
  image: python:3.7-buster

nose2-3.8-buster:
  extends: .nose2
  stage: test
  image: python:3.8-buster

nose2-3.9-bullseye:
  extends: .nose2
  stage: test
  image: python:3.9-bullseye

nose2-3.10-bullseye:
  extends: .nose2
  stage: test
  image: python:3.10-bullseye

0-generatemetrics-coveragehack:
  stage: metrics
  image: python:3.9-bullseye
  script:
    - echo 'This script will allow the coverage report to be shown before the metrics are generated.'
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_TAG'

generatemetrics:
  stage: metrics
  image: python:3.9-bullseye
  before_script:
    - apt-get update
    - apt-get install libboost-system-dev tesseract-ocr build-essential git cmake ffmpeg libsm6 libxext6 -y
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - git submodule update --init --recursive
    - python3 setup.py build_ext
    - mkdir temp
    - mkdir temp1
    - mkdir temp2
    - unzip data/charts_steph.zip -d data
    - unzip data/charts_steph_upscaled.zip -d data
    - unzip data/generated_pie_charts_legend.zip -d data
    - unzip data/generated_pie_charts_without_legend.zip -d data
  script:
    - export PIECHARTOCR_METRICS_JSON_FILENAME=ocr_test_metrics_mock_legend.json
    - export PIECHARTOCR_BASE_FOLDERNAME=generated_pie_charts_legend
    - export PIECHARTOCR_UPSCALED_BASE_FOLDERNAME=generated_pie_charts_legend
    - export PIECHARTOCR_UPSCALED_FILENAME=image.png
    - python3 run_generate_metrics.py
    - python3 run_process_metrics.py
    - export PIECHARTOCR_METRICS_JSON_FILENAME=ocr_test_metrics_mock_without_legend.json
    - export PIECHARTOCR_BASE_FOLDERNAME=generated_pie_charts_without_legend
    - export PIECHARTOCR_UPSCALED_BASE_FOLDERNAME=generated_pie_charts_without_legend
    - export PIECHARTOCR_UPSCALED_FILENAME=image.png
    - python3 run_generate_metrics.py
    - python3 run_process_metrics.py
    - export PIECHARTOCR_METRICS_JSON_FILENAME=ocr_test_metrics.json
    - unset PIECHARTOCR_BASE_FOLDERNAME
    - unset PIECHARTOCR_UPSCALED_BASE_FOLDERNAME
    - unset PIECHARTOCR_UPSCALED_FILENAME
    - python3 run_generate_metrics.py
    - python3 run_process_metrics.py
  artifacts:
    paths: [ artifacts/ocr_test_metrics.json, artifacts/ocr_test_metrics.png, artifacts/ocr_test_metrics_mock_legend.json, artifacts/ocr_test_metrics_mock_legend.png, artifacts/ocr_test_metrics_mock_without_legend.json, artifacts/ocr_test_metrics_mock_without_legend.png ]
    expose_as: "Metrics"
    expire_in: never
  #  only:
  #    - merge_requests
  #    - tags
  #    - main
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
    - if: '$CI_COMMIT_TAG'
      when: manual

pypi:
  stage: deploy
  image: python:3.9-bullseye
  before_script:
    - git submodule update --init --recursive
    - python3 -m pip install twine setuptools
    - python3 setup.py sdist
  script:
    - python3 -m twine upload dist/*
  rules:
    - if: '$CI_COMMIT_TAG'
